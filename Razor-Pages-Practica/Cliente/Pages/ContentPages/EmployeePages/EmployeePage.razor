@implements IDisposable

@if (allState.ShowEmployee)
{
    if (ShowMainPage)
    {
        <div class="container-fluid mt-5">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-header">
                            <button class="btn btn-outline-success" @onclick="ShowAddOrUpdateEmployeeButtonClicked">
                                <i class="bi bi-plus-circle-dotted"></i>
                                Add Employee</button>
                        </div>
                        <div class="card-body">
                            <SfGrid DataSource="@Employees">
                                <GridColumns>
                                    <GridColumn HeaderText="Employee Image">
                                        <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <div class="image">
                                                    <img src="@employee.Photo" alt="@employee.Name" width="150" height="150" />
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(Employee.CivilId) HeaderText="Civil ID"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.FileNumber) HeaderText="File Number"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.Name) HeaderText="Name"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.TelephoneNumber) HeaderText="Telephone"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.JobName) HeaderText="Job Name"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.Branch.Name) HeaderText="Branch"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.Town.Name) HeaderText="Town"></GridColumn>
                                    <GridColumn HeaderText="Menu" HeaderTextAlign="TextAlign.Left">
                                        <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <i class="bi bi-menu-down text-primary" id="cursorStyle" @onclick="()=>ShowMenuPopUp(employee!)"></i>
                                            }
                                        </Template>
                                    </GridColumn>

                                </GridColumns>
                            </SfGrid>
                        </div>
                        <div class="card-footer">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

<AddOrUpdatePage @ref="addOrUpdateEmployee"
    Employee="Employee"
                 NotifyParentFormCloseClicked="NotifyParentFormCloseClicked"
    Countries="DefaultCountries"
    Cities="SelectedCities"
    Towns="SelectedTowns"
    GeneralDepartments="DefaultGeneralDepartments"
    Departments="SelectedDepartments"
    Branches="SelectedBranches"
    HandleCountrySelectedEvent="HandleCountrySelectedEvent"
                 HandleCitySelectedEvent="HandleCitySelectedEvent"
                 HandleGeneralDepartmentSelectedEvent="HandleGeneralDepartmentSelectedEvent"
                 HandleSaveEmployeeClickedEvent="HandleSaveEmployeeClickedEvent"
                 ShowAddOrUpdateEmployee="ShowAddOrUpdatePage">
</AddOrUpdatePage>

<EmployeeDetailsPage EmployeeDetails="Employee"
ShowDetailsPage="ShowDetailsPage"
HandleDetailsPageCloseBtnClicked="HandleDetailsPageCloseBtnClicked" />


<ContentMenu @ref="contextMenu"
    HandleDeleteClicked="DeleteClicked"
    HandleEditClicked="EditClicked"
    HandleViewClicked="ViewClicked"
    HandleAddHealthClicked="AddHealthClicked"
    HandleAddOvertimeClicked="AddOvertimeClicked"
    HandleAddSanctionClicked="AddSanctionClicked"
    HandleAddVacationClicked="AddVacationClicked" />

<DoctorDialog @ref="doctorDialog" Doctor="Doctor" HandleSaveOperationEvent="SaveHealthEvent"/>

@code {
    AddOrUpdatePage? addOrUpdateEmployee;
    public Employee Employee { get; set; } = new();
    public List<Employee> Employees { get; set; } = [];

    public List<Country> DefaultCountries { get; set; } = [];
    public List<City> DefaultCities { get; set; } = [];
    public List<Town> DefaultTowns { get; set; } = [];


    public List<GeneralDepartment> DefaultGeneralDepartments { get; set; } = [];
    public List<Department> DefaultDepartments { get; set; } = [];
    public List<Branch> DefaultBranches { get; set; } = [];

    public List<Department> SelectedDepartments { get; set; } = new List<Department>();
    public List<Branch> SelectedBranches { get; set; } = new List<Branch>();
    public List<City> SelectedCities { get; set; } = new List<City>();
    public List<Town> SelectedTowns { get; set; } = new List<Town>();

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
        await LoadDefaults();
        allState.Action += StateHasChanged;
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

    private async Task LoadDefaults()
    {
        DefaultCountries = await countryService.GetAll(Constants.CountryBaseUrl);
        DefaultCities = await cityService.GetAll(Constants.CityBaseUrl);
        DefaultTowns = await townService.GetAll(Constants.TownBaseUrl);
        DefaultGeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
        DefaultDepartments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        DefaultBranches = await branchService.GetAll(Constants.BranchBaseUrl);
    }

    private async Task NotifyParentFormCloseClicked()
    {
        ShowMainPage = true;
        ShowAddOrUpdatePage = false;
        await LoadEmployees();
        SelectedEmployee = new();
    }

    //country select
    private void HandleCountrySelectedEvent(int countryId) =>
        SelectedCities = DefaultCities.Where(c => c.countryId == countryId).ToList();

    //city select
    private void HandleCitySelectedEvent(int cityId) =>
        SelectedTowns = DefaultTowns.Where(t => t.cityId == cityId).ToList();

    //General department select
    void HandleGeneralDepartmentSelectedEvent(int generalDepartmentId) =>
        SelectedDepartments = DefaultDepartments.Where(gd => gd.generalDepartmentId == generalDepartmentId).ToList();

    //Department select
    void HandleDepartmentSelectedEvent(int departmentId) =>
        SelectedBranches = DefaultBranches.Where(d => d.departmentId == departmentId).ToList();

    private async Task LoadEmployees()
    {
        Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);
    }



    ContentMenu? contextMenu;
    public bool ShowDetailsPage { get; set; } = false; 
    public Employee SelectedEmployee { get; set; } = new();
    void ShowMenuPopUp(Employee employee)
    {
        SelectedEmployee = employee;
        contextMenu!.OpenContextMenu();
    }

    void EditClicked()
    {
        // EmployeeGrouping1
        addOrUpdateEmployee.Employee.Id = SelectedEmployee.Id;
        addOrUpdateEmployee.EmployeeGroup1.Name = SelectedEmployee.Name!;
        addOrUpdateEmployee.EmployeeGroup1.TelephoneNumber = SelectedEmployee.TelephoneNumber;
        addOrUpdateEmployee.EmployeeGroup1.FileNumber = SelectedEmployee.FileNumber;
        addOrUpdateEmployee.EmployeeGroup1.Address = SelectedEmployee.Address;
        addOrUpdateEmployee.EmployeeGroup1.Photo = SelectedEmployee.Photo;

        // EmployeeGroup2
        addOrUpdateEmployee.EmployeeGroup2.JobName = SelectedEmployee.JobName!;
        addOrUpdateEmployee.EmployeeGroup2.Other = SelectedEmployee.Other;
        // General Department / Department / Branch
        addOrUpdateEmployee.GeneralDepartment = SelectedEmployee.Branch.Department.generalDepartment.Name;
        addOrUpdateEmployee.Department = SelectedEmployee.Branch.Department.Name!;
        addOrUpdateEmployee.Branch = SelectedEmployee.Branch.Name!;

        // Country / City / Town
        addOrUpdateEmployee.Country = SelectedEmployee.Town.City.Country.Name;
        addOrUpdateEmployee.City = SelectedEmployee.Town.City.Name!;
        addOrUpdateEmployee.Town = SelectedEmployee.Town.Name!;

        // Title I
        addOrUpdateEmployee.Title = "Update";
        SelectedEmployee = new();
        contextMenu!.CloseContextMenu();
        ShowAddOrUpdatePage = true;
        ShowMainPage = false;

    }

    private async Task DeleteClicked()
    {
        contextMenu.CloseContextMenu();
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {SelectedEmployee.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await branchService.DeleteById(SelectedEmployee.Id, Constants.EmployeeBaseUrl);
        var result = await DisplayMessage(response.flag, response.message);
        if (result)
        {
            SelectedEmployee = new();
            await LoadEmployees();
        }
    }

    private void ViewClicked()
    {
        Employee = SelectedEmployee;
        contextMenu.CloseContextMenu();
        ShowDetailsPage = true;
        ShowMainPage = false;
        SelectedEmployee = null;
    }

    async Task HandleSaveEmployeeClickedEvent(Employee employee)
    {
        bool successCheck = false;
        if (employee.Id > 0)
        {
            var result = await employeeService.Update(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(result.flag, result.message);
        }
        else
        {
            var response = await employeeService.Insert(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(response.flag, response.message);
        }
        if (successCheck)
        {
            addOrUpdateEmployee!.ClearContent();
        }
    }

    public bool ShowMainPage { get; set; } = true;
    public bool ShowAddOrUpdatePage { get; set; } = false;

    void ShowAddOrUpdateEmployeeButtonClicked()
    {
        ShowMainPage = false;
        ShowAddOrUpdatePage = true;
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }


    // Details employee Close btn clicked
    void HandleDetailsPageCloseBtnClicked()
    {
        ShowDetailsPage = false;
        ShowMainPage = true;
    }

    DoctorDialog? doctorDialog;
    Doctor Doctor = new();
    private void AddHealthClicked()
    {
        Doctor.EmployeeId = SelectedEmployee.Id;
        contextMenu.CloseContextMenu();
        doctorDialog.OpenDialog();
    }

}
