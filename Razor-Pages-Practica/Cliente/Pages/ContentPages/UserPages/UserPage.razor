@implements IDisposable
@if (allState.ShowUser)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        Manage Users
                    </div>
                    <div class="card-body" style="max-height: 500px; overflow-y: scroll;">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Id</th>
                                    <th scope="col">Name</th>
                                    <th scope="col">Email</th>
                                    <th scope="col">Rol</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (ManageUsers is not null)
                                {
                                    int count = 1;
                                    foreach (var item in ManageUsers)
                                    {
                                        <tr>
                                            <th scope="row">@count</th>
                                            <td>@item.UserId</td>
                                            <td>@item.Name</td>
                                            <td>@item.Email</td>
                                            <td>@item.Role</td>
                                            <td>
                                                <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)"></i>
                                                <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(item)"></i>
                                            </td>
                                        </tr>
                                        count++;
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="5">
                                            <div class="alert alert-info text-center">No User registered yet!</div>
                                        </td>
                                    </tr>
                                }

                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

<UserDialog ref="userDialog"
            ManageUser="ManageUser"
            SystemRoles="SystemRoles"
            HandleSaveOperationEvent="HandleSaveOperationEvent" />

@code {
        UserDialog? userDialog;
        public ManageUser ManageUser { get; set; } = new();
        public List<ManageUser> ManageUsers { get; set; } = new();
        public List<SystemRole> SystemRoles { get; set; } = new();

        protected async override Task OnInitializedAsync()
        {
            await GetUsers();
            await GetRoles();
            allState.Action += StateHasChanged;
        }

        private async Task GetUsers()
        {
            ManageUsers = await accountService.GetUsers();
        }

        private async Task GetRoles()
        {
            SystemRoles = await accountService.GetRoles();
        }

        public void OpenDialog()
        {
            userDialog?.OpenDialog();
        }

    private async Task HandleSaveOperationEvent(ManageUser mngUser)
        {
            var result = await accountService.UpdateUser(mngUser);
            bool successCheck = await DisplayMessage(result.flag, result.message);
            if (successCheck)
            {
                ManageUser = new();
                await GetUsers();
            }
        }

        private void EditClicked(ManageUser user)
        {
            ManageUser = user;
            OpenDialog();
        }

    private async Task<bool> DeleteClicked(ManageUser user)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {user.Name}?", "Confirm Delete");
        if (!confirm) return false;

        var response = await accountService.DeleteUser(user.UserId);
        var result = await DisplayMessage(response.flag, response.message);
        if (result)
        {
            await GetUsers();
        }
        return result;
    }



        private async Task<bool> DisplayMessage(bool flag, string message)
        {
            if (flag)
            {
                await dialogService.AlertAsync(message, "Success Operation");
                return true;
            }
            else
            {
                await dialogService.AlertAsync(message, "Alert!");
                return false;
            }
        }

        public void Dispose()
        {
            allState.Action -= StateHasChanged;
        }

    

}
